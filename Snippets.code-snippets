{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Console Time": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ct",
		"body": ["console.time('${1:timeId}')", "console.timeEnd('${1:timeId}')"],
		"description": ""
	},
	"Console Log": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "cl",
		"body": ["console.log($1)"],
		"description": ""
	},
	"Console Log String": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "cls",
		"body": ["console.log('$1')"],
		"description": ""
	},
	"Arrow Function": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "af",
		"body": ["($1) => {$2}"],
		"description": ""
	},
	"New Arrow Function": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "naf",
		"body": ["const ${1:name} = ($2) => {", "\t$3", "}"],
		"description": ""
	},
	"Async Function": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "asf",
		"body": ["async function ${1:name}($2) {", "\t$3", "}"],
		"description": ""
	},
	"Function": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "f",
		"body": ["function ${1:name}($2) {", "\t$3", "}"],
		"description": ""
	},
	"Const": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "c",
		"body": ["const "],
		"description": ""
	},
	"Let": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "l",
		"body": ["let "],
		"description": ""
	},
	"Return": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "r",
		"body": ["return "],
		"description": ""
	},
	"Export": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "e",
		"body": ["export "],
		"description": ""
	},
	"Export Default": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ed",
		"body": ["export default ${1:moduleName}"],
		"description": ""
	},
	"Window": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "w",
		"body": ["window."],
		"description": ""
	},
	"Document": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "d",
		"body": ["document."],
		"description": ""
	},
	"Async": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "a",
		"body": ["async "],
		"description": ""
	},
	"Add Event Listener": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ad",
		"body": ["addEventListener('${1:type}', ${2:listener})"],
		"description": ""
	},
	"If": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "i",
		"body": ["if (${1:condition}) {", "\t$2", "}"],
		"description": ""
	},
	"If Else": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ie",
		"body": ["if (${1:condition}) {", "\t$2", "} else {", "\t$3", "}"],
		"description": ""
	},
	"Try Catch": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "tr",
		"body": ["try {", "\t$2", "} catch (${1:error}) {", "\t", "}"],
		"description": ""
	},
	"Import Module": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "im",
		"body": ["import ${2:moduleName} from '${1:module}'"],
		"description": ""
	},
	"Import Module (Destructured)": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "imd",
		"body": ["import {${2:destructuredModule}} from '${1:module}'"],
		"description": ""
	},
	"Call Function": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "cf",
		"body": ["${1:name}($2)"],
		"description": ""
	},
	"Set Interval": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "si",
		"body": ["setInterval(() => {", "\t$0", "}, ${1:interval})"],
		"description": ""
	},
	"Set Timeout": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "st",
		"body": ["setTimeout(() => {", "\t$0", "}, ${1:timeout})"],
		"description": ""
	},
	"Ternary": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "t",
		"body": ["${1:condition} ? ${2:first} : ${3:second}"],
		"description": ""
	},
	"Array": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ar",
		"body": ["const ${1:name} = [$2]"],
		"description": ""
	},
	"Object": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ob",
		"body": ["const ${1:name} = {$2}"],
		"description": ""
	},
	"Functional Method": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "fm",
		"body": ["${1:name}(($2) => {", "\t$3", "})"],
		"description": ""
	},
	"Destructured Array": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "dar",
		"body": ["const [${1:name}] = ${2:array}"],
		"description": ""
	},
	"Destructured Object": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "dob",
		"body": ["const {${1:name}} = ${2:object}"],
		"description": ""
	},
	"()": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ยบ",
		"body": ["($1)"],
		"description": ""
	}
}
